// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch"]
}
model Car {
	id Int @id @default(autoincrement())
	carMileage Float 
	dayRentalPrice Float 
	fuelConsumption Int 
	startrentalDate DateTime? 
	overRentalDate DateTime? 
	carStatus CARSTATUS 
	carModelId Int? 
	carModel CarModel? @relation(name: "CarToCarModel", fields: [carModelId], references: [id])
	rental Rental[] @relation(name: "CarToRental")
}
model CarModel {
	id Int @id @default(autoincrement())
	model String 
	priceCategory PRICECATEGORY 
	barnd String 
	cars Car[] @relation(name: "CarToCarModel")
}
model Rental {
	id Int @id @default(autoincrement())
	employeeId Int 
	carId Int 
	userId Int 
	createdAt DateTime @default(now())
	updatedAt DateTime? @updatedAt
	status RENTALSTATUS 
	employee Employee @relation(name: "EmployeeToRental", fields: [employeeId], references: [id])
	car Car @relation(name: "CarToRental", fields: [carId], references: [id])
	user User @relation(name: "RentalToUser", fields: [userId], references: [id])
}
model Employee {
	id Int @id
	rental Rental[] @relation(name: "EmployeeToRental")
}
model User {
	id Int @id @default(autoincrement())
	rental Rental[] @relation(name: "RentalToUser")
	email String @unique
	password String 
	phoneNumber String? 
	address String? 
	birthDate DateTime? 
	expirationDateDrivingLicense DateTime? 
	createdAt DateTime? @default(now())
	userLogins UserLogin[] @relation(name: "UserToUserLogin")
	roles ROLE 
	@@map("users")
}
model UserLogin {
	id Int @id @default(autoincrement())
	userId Int 
	users User @relation(name: "UserToUserLogin", fields: [userId], references: [id])
	expires DateTime 
	roles String 
	refreshToken String @unique
	createdAt DateTime @default(now())
}
enum CARSTATUS {
	REPAIRING
	AVAILABLE
}
enum PRICECATEGORY {
	BASIC
	STANDARD
	MEDIUM
	PREMIUM
}
enum RENTALSTATUS {
	LASTS
	CANCELLED
	COMPLETED
}
enum ROLE {
	USER
	GLOBAL_ADMIN
}