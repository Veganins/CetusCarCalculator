generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String
}

model Car {
  id              Int       @id @default(autoincrement())
  carModelId      Int
  carMileage      Float
  dayRentalPrice  Float
  fuelConsumption Int
  startrentalDate DateTime?
  overRentalDate  DateTime?
  carStatus       CARSTATUS
  carModel        CarModel  @relation("CarToCarModel", fields: [carModelId], references: [id])
  rental          Rental[]  @relation("CarToRental")
}

model CarModel {
  id            Int           @id @default(autoincrement())
  barndId       Int
  count         Int
  model         String
  priceCategory PRICECATEGORY
  car           Car[]         @relation("CarToCarModel")
  barnd         Barnd         @relation("BarndToCarModel", fields: [barndId], references: [id])
}

model Barnd {
  id       Int        @id
  carModel CarModel[] @relation("BarndToCarModel")
}

model Rental {
  id         Int          @id @default(autoincrement())
  employeeId Int
  carId      Int
  userId     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  status     RENTALSTATUS
  car        Car          @relation("CarToRental", fields: [carId], references: [id])
  employee   Employee     @relation("EmployeeToRental", fields: [employeeId], references: [id])
  user       User         @relation("RentalToUser", fields: [userId], references: [id])
}

model Employee {
  id     Int      @id
  rental Rental[] @relation("EmployeeToRental")
}

model User {
  id                           Int         @id @default(autoincrement())
  email                        String      @unique
  password                     String
  phoneNumber                  String?
  address                      String?
  birthDate                    DateTime
  createdAt                    DateTime?   @default(now())
  roles                        String?     @default("user")
  expirationDateDrivingLicense DateTime
  rental                       Rental[]    @relation("RentalToUser")
  userLogins                   UserLogin[] @relation("UserToUserLogin")
}

model UserLogin {
  id        Int      @id @default(autoincrement())
  userId    Int
  expires   DateTime
  roles     String
  createdAt DateTime @default(now())
  user      User     @relation("UserToUserLogin", fields: [userId], references: [id])
}

enum CARSTATUS {
  REPAIRING
  AVAILABLE
}

enum PRICECATEGORY {
  BASIC
  STANDARD
  MEDIUM
  PREMIUM
}

enum RENTALSTATUS {
  LASTS
  CANCELLED
  COMPLETED
}
